# Generated by Django 2.2.6 on 2019-10-11 16:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('AKModel', '0002_ak_owner'),
    ]

    operations = [
        migrations.CreateModel(
            name='AKTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the AK Tag', max_length=64, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'AK Tag',
                'verbose_name_plural': 'AK Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AKTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the AK Track', max_length=64, unique=True, verbose_name='Name')),
                ('color', models.CharField(blank=True, help_text='Color to display this track in', max_length=7, verbose_name='Color')),
            ],
            options={
                'verbose_name': 'AK Track',
                'verbose_name_plural': 'AK Tracks',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AKType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the AK Type', max_length=64, unique=True, verbose_name='Name')),
                ('color', models.CharField(blank=True, help_text='Color to display this type in', max_length=7, verbose_name='Color')),
            ],
            options={
                'verbose_name': 'AK Type',
                'verbose_name_plural': 'AK Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AKRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the AK Requirement', max_length=128, unique=True, verbose_name='Name')),
                ('event', models.ForeignKey(help_text='Matching event', on_delete=django.db.models.deletion.CASCADE, to='AKModel.Event', verbose_name='Event')),
            ],
            options={
                'verbose_name': 'AK Requirement',
                'verbose_name_plural': 'AK Requirements',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AK',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the AK', max_length=256, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(blank=True, help_text='Name displayed in schedule', max_length=64, unique=True, verbose_name='Short Name')),
                ('description', models.TextField(blank=True, help_text='Description of the AK', verbose_name='Description')),
                ('link', models.URLField(blank=True, help_text='Link to wiki page', verbose_name='Web Link')),
                ('reso', models.BooleanField(default=False, help_text='Intends to submit a reso', verbose_name='Resolution Intention')),
                ('notes', models.TextField(blank=True, help_text='Notes to organizers', verbose_name='Internal Notes')),
                ('interest', models.IntegerField(default=-1, help_text='Expected number of people to attend', verbose_name='Interest')),
                ('conflicts', models.ManyToManyField(blank=True, help_text='AKs that conflict and thus must not take place at the same time', related_name='conflict', to='AKModel.AK', verbose_name='Conflicting AKs')),
                ('event', models.ForeignKey(help_text='Matching event', on_delete=django.db.models.deletion.CASCADE, to='AKModel.Event', verbose_name='Event')),
                ('owners', models.ManyToManyField(help_text='Those organizing the AK', to='AKModel.AKOwner', verbose_name='Owners')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='AKs that should precede this AK in the schedule', to='AKModel.AK', verbose_name='Prerequisite AKs')),
                ('requirements', models.ManyToManyField(blank=True, help_text="AK's Requirements", to='AKModel.AKRequirement', verbose_name='Requirements')),
                ('tags', models.ManyToManyField(blank=True, help_text='Tags provided by AK owners', to='AKModel.AKTag', verbose_name='Tags')),
                ('track', models.ForeignKey(help_text='Track the AK belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='AKModel.AKTrack', verbose_name='Track')),
                ('type', models.ForeignKey(help_text='Type of the AK', on_delete=django.db.models.deletion.PROTECT, to='AKModel.AKType', verbose_name='Type')),
            ],
            options={
                'verbose_name': 'AK',
                'verbose_name_plural': 'AKs',
            },
        ),
    ]
